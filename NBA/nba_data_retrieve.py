# -*- coding: utf-8 -*-
"""Nba Data Retrieve

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qx5on5I8SFvCX4vNxmE_NH3RGRNhCdNB

## Import Some Modules
"""

from nba_api.stats.endpoints import boxscoresummaryv2
from nba_api.stats.endpoints import boxscoreadvancedv2
from nba_api.stats.endpoints import boxscoretraditionalv2

from nba_api.stats.endpoints import leaguegamelog
from nba_api.stats.endpoints import commonplayerinfo
from nba_api.stats.endpoints import teamgamelog
from nba_api.stats.endpoints import teamdashptshots
from nba_api.stats.endpoints import teamdashboardbygamesplits
from nba_api.stats.endpoints import teamdashboardbyshootingsplits

import pandas as pd
import numpy as np

"""## Hyperparameter

Args:
player_id:        ID of the player to look up
team_id:          ID of the team to look up
measure_type:     Specifies type of measure to use (Base, Advanced, etc.)
per_mode:         Mode to measure statistics (Totals, PerGame, Per36, etc.) plus_minus Whether or not to consider plus minus (Y or N) pace_adjust Whether or not to pace adjust stats (Y or N)
rank:             Whether or not to consider rank (Y or N)
league_id:        ID for the league to look in (Default is 00) season Season given to look up
season_type:      Season type to consider (Regular / Playoffs) po_round Playoff round
outcome:          Filter out by wins or losses
location:         Filter out by home or away
month:            Specify month to filter by season_segment Filter by pre/post all star break date_from Filter out games before a specific date date_to Filter out games after a specific date opponent_team_id Opponent team ID to look up vs_conference Filter by conference
vs_division:      Filter by division
game_segment:     Filter by half / overtime
period:           Filter by quarter / specific overtime shot_clock_range Filter statistics by range in shot clock last_n_games Filter by number of games specified in N
shot_clock_range: Filter statistics by range in shot clock 
last_n_games      Filter by number of games specified in N

## Retrieve Box Score Summary
"""

game_id_list = ['00' + str(21900001+i) for i in range(2,100)]
for i in range(10): #total games played in a season
    if i == 1: #set up for the first game
        player_info = boxscoreadvancedv2.BoxScoreAdvancedV2(game_id = '0021900001', timeout = 180)
        info = player_info.get_dict()
        initial_frame = pd.DataFrame(info['resultSets'][0]['rowSet'], columns = info['resultSets'][0]['headers'])
        total_frame = initial_frame
    else:
        try: #remaining games
            player_info = boxscoreadvancedv2.BoxScoreAdvancedV2(game_id = game_id_list[i], timeout = 180)
            info = player_info.get_dict()
            frame = pd.DataFrame(info['resultSets'][0]['rowSet'], columns = info['resultSets'][0]['headers'])
            total_frame = total_frame.append(frame)
        except:
            print("Fail at game: "+ str(i))
            continue

print(total_frame)
total_frame.to_csv(r'/Users/Kyle/Downloads/Project_Files/Data_Retrieved/Game_Play/test2.csv', index = False) #save to and address

"""## Retireve Box Score of Each Player in Each Team"""

#create game id list
game_id_list = ['00' + str(21900001+i) for i in range(2,100)]

#retrieve game data
for i in range(1230): #total games played in a season
    if i == 1: #set up for the first game
        player_info = boxscorescoringv2.BoxScoreScoringV2(game_id = '0021900001', timeout = 180)
        info = player_info.get_dict()
        initial_frame = pd.DataFrame(info['resultSets'][0]['rowSet'], columns = info['resultSets'][0]['headers'])
        total_frame = initial_frame
    else:
        try: #remaining games
            player_info = boxscorescoringv2.BoxScoreScoringV2(game_id = game_id_list[i], timeout = 180)
            info = player_info.get_dict()
            frame = pd.DataFrame(info['resultSets'][0]['rowSet'])
            total_frame = total_frame.append(frame)
        except:
            print("Fail at game: "+ str(i))
            continue


#print(info.keys())
#print(info['resultSets'])
#print(info['resultSets'][0]['rowSet']) #for all the player's information
#print(info['resultSets'][0]['headers'])

total_frame.to_csv(r'/Users/Kyle/Downloads/Project_Files/Data_Retrieved/Game_Play/test.csv', index = False) #save to and address

"""## Retrieve Team Dashboards

"""

team_id_list = [['ATL', 1610612737], ['BOS', 1610612738], ['BKN', 1610612751], ['CHA', 1610612766], ['CHI', 1610612741], ['CLE', 1610612739], ['DAL', 1610612742], ['DEN', 1610612743], ['DET', 1610612765], ['GSW', 1610612744], ['HOU', 1610612745], ['IND', 1610612754], ['LAC', 1610612746], ['LAL', 1610612747], ['MEM', 1610612763], ['MIA', 1610612748], ['MIL', 1610612749], ['MIN', 1610612750], ['NOP', 1610612740], ['NYK', 1610612752], ['OKC', 1610612760], ['ORL', 1610612753], ['PHI', 1610612755], ['PHX', 1610612756], ['POR', 1610612757], ['SAC', 1610612758], ['SAS', 1610612759], ['TOR', 1610612761], ['UTA', 1610612762], ['WAS', 1610612764]]
selected_team = 'CHA'
selected_team_number = int(0)
total_frame = pd.DataFrame()

for i in range(len(team_id_list)):
  if team_id_list[i][0] == selected_team:
    selected_team_number = team_id_list[i][1]

team_info = teamdashboardbygamesplits.TeamDashboardByGameSplits(team_id = selected_team_number, last_n_games = 80, timeout = 30)
team_info = team_info.get_dict()

frame = pd.DataFrame(team_info['resultSets'][1]['rowSet'],columns = team_info['resultSets'][0]['headers'])
total_frame = total_frame.append(frame)

print(total_frame)

team_id_list = [['ATL', 1610612737], ['BOS', 1610612738], ['BKN', 1610612751], ['CHA', 1610612766], ['CHI', 1610612741], ['CLE', 1610612739], ['DAL', 1610612742], ['DEN', 1610612743], ['DET', 1610612765], ['GSW', 1610612744], ['HOU', 1610612745], ['IND', 1610612754], ['LAC', 1610612746], ['LAL', 1610612747], ['MEM', 1610612763], ['MIA', 1610612748], ['MIL', 1610612749], ['MIN', 1610612750], ['NOP', 1610612740], ['NYK', 1610612752], ['OKC', 1610612760], ['ORL', 1610612753], ['PHI', 1610612755], ['PHX', 1610612756], ['POR', 1610612757], ['SAC', 1610612758], ['SAS', 1610612759], ['TOR', 1610612761], ['UTA', 1610612762], ['WAS', 1610612764]]
selected_team_number = int(0)
total_frame = pd.DataFrame()

for selected_team in range(len(team_id_list)):
    selected_team_number = team_id_list[selected_team][1]

    for per_season in range(12,20):
      team_info = teamgamelog.TeamGameLog(season = '20%s-'%per_season+str(per_season+1), team_id = selected_team_number, timeout = 30)
      team_info = team_info.get_dict()
      frame = pd.DataFrame(team_info['resultSets'][0]['rowSet'],columns = team_info['resultSets'][0]['headers'])
      total_frame = total_frame.append(frame)

print(total_frame)
total_frame.to_csv(r'/Users/Kyle/Downloads/Project_Files/Data_Retrieved/Game_Play/test3.csv', index = False) #save to and address

"""## Retrieve Team Dash Points of Shots"""

#Define the number of team for query
team_id_list = [['ATL', 1610612737], ['BOS', 1610612738], ['BKN', 1610612751], ['CHA', 1610612766], ['CHI', 1610612741], ['CLE', 1610612739], ['DAL', 1610612742], ['DEN', 1610612743], ['DET', 1610612765], ['GSW', 1610612744], ['HOU', 1610612745], ['IND', 1610612754], ['LAC', 1610612746], ['LAL', 1610612747], ['MEM', 1610612763], ['MIA', 1610612748], ['MIL', 1610612749], ['MIN', 1610612750], ['NOP', 1610612740], ['NYK', 1610612752], ['OKC', 1610612760], ['ORL', 1610612753], ['PHI', 1610612755], ['PHX', 1610612756], ['POR', 1610612757], ['SAC', 1610612758], ['SAS', 1610612759], ['TOR', 1610612761], ['UTA', 1610612762], ['WAS', 1610612764]]
selected_team = 'CHA'
selected_team_number = int(0)
total_frame = pd.DataFrame()

for i in range(len(team_id_list)):
  if team_id_list[i][0] == selected_team:
    selected_team_number = team_id_list[i][1]


team_info = teamdashptshots.TeamDashPtShots(team_id = selected_team_number, last_n_games = 80, timeout = 30)
team_info = team_info.get_dict()
frame = pd.DataFrame(team_info['resultSets'][1]['rowSet'],columns = team_info['resultSets'][0]['headers'])
total_frame = total_frame.append(frame)
total_frame.to_csv(r'/Users/Kyle/Downloads/Project_Files/Data_Retrieved/Game_Play/test1.csv', index = False) #save to and address

"""for i in range(1230): #total games played in a season
  try: #remaining games
      team_info = teamdashptshots.TeamDashptShots(team_id = selected_team_number, timeout = 30)
      team_info = team_info.get_dict()
      frame = pd.DataFrame(info['resultSets'][0]['rowSet'])
      total_frame = total_frame.append(frame)
  except:
      print("Fail at game: "+ str(i))
      continue"""